plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.serialization)
}

import java.util.Properties

// Load secrets from local.properties as a fallback to environment variables
def localProps = new Properties()
def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.exists()) {
    localPropsFile.withInputStream { stream -> localProps.load(stream) }
}

def envOrProp = { String key ->
    def value = System.getenv(key)
    if (value == null || value.toString().trim().isEmpty()) {
        value = localProps.getProperty(key, "")
    }
    // Strip surrounding quotes if present (e.g. value written as "example")
    if (value != null && value.size() >= 2) {
        def startsWithQuote = value.startsWith('"') || value.startsWith("'")
        def endsWithQuote = value.endsWith('"') || value.endsWith("'")
        if (startsWithQuote && endsWithQuote) {
            value = value.substring(1, value.length() - 1)
        }
    }
    return value ?: ""
}

android {
    namespace 'info.thanhtunguet.myhome'
    compileSdk 36

    defaultConfig {
        applicationId "info.thanhtunguet.myhome"
        minSdk 22
        targetSdk 36
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // BuildConfig fields populated from env vars, falling back to local.properties
        buildConfigField "String", "CLOUDFLARE_API_TOKEN", "\"${envOrProp('CLOUDFLARE_API_TOKEN')}\""
        buildConfigField "String", "CLOUDFLARE_API_EMAIL", "\"${envOrProp('CLOUDFLARE_API_EMAIL')}\""
        buildConfigField "String", "CLOUDFLARE_API_KEY", "\"${envOrProp('CLOUDFLARE_API_KEY')}\""
        buildConfigField "String", "CLOUDFLARE_ZONE_ID", "\"${envOrProp('CLOUDFLARE_ZONE_ID')}\""
        buildConfigField "String", "CLOUDFLARE_RECORD_ID", "\"${envOrProp('CLOUDFLARE_RECORD_ID')}\""
        buildConfigField "String", "CLOUDFLARE_RECORD_NAME", "\"${envOrProp('CLOUDFLARE_RECORD_NAME')}\""
        buildConfigField "String", "TELEGRAM_BOT_TOKEN", "\"${envOrProp('TELEGRAM_BOT_TOKEN')}\""
        buildConfigField "String", "TELEGRAM_CHAT_ID", "\"${envOrProp('TELEGRAM_CHAT_ID')}\""
        buildConfigField "String", "PC_IP_ADDRESS", "\"${envOrProp('PC_IP_ADDRESS')}\""
        buildConfigField "String", "PC_MAC_ADDRESS", "\"${envOrProp('PC_MAC_ADDRESS')}\""
        buildConfigField "String", "PC_SHUTDOWN_COMMAND", "\"${envOrProp('PC_SHUTDOWN_COMMAND')}\""
        // Probe port remains configurable via settings; default is 3389 in code
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        buildConfig = true
    }
    packaging {
        resources {
            excludes += "META-INF/INDEX.LIST"
            excludes += "META-INF/io.netty.versions.properties"
        }
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.leanback
    implementation libs.material
    implementation libs.androidx.cardview
    implementation libs.androidx.lifecycle.service
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.kotlinx.coroutines.android
    implementation libs.kotlinx.serialization.json
    // Replaced Ktor with lightweight HttpURLConnection
    // Keep kotlinx-serialization for JSON
    // Silence SLF4J 2.x warnings from dependencies (e.g., ktor) with a NOP logger
    implementation libs.slf4j.nop
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}